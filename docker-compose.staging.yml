version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    restart: always
    environment:
      - NODE_ENV=staging
      - PORT=4000
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_USER=user
      - DATABASE_PASSWORD=password
      - DATABASE_NAME=bitcoiners_staging
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "4000:4000"
      - "3001:3001" # WebSocket port
    depends_on:
      - db
      - redis
    networks:
      - app_network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  db:
    image: postgres:14-alpine
    restart: always
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=bitcoiners_staging
    ports:
      - "5432:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    networks:
      - app_network

  redis:
    image: redis:6-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_staging_data:/data
    networks:
      - app_network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    command: npm run dev -- --host
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_staging_data:
  redis_staging_data:
