version: "3.8"

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: bitcoiners-frontend
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_WS_URL=ws://localhost:5173/ws
    command: npm run dev -- --host 0.0.0.0
    depends_on:
      - backend
    networks:
      - app_network
    dns:
      - 8.8.8.8
      - 8.8.4.4

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: bitcoiners-backend
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "4000:4000"
      - "3001:3001" # Added WebSocket port
    environment:
      - NODE_ENV=development
      - PORT=4000
      - WS_PORT=3001 # Added WebSocket port env var
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/bitcoiners
      - REDIS_URL=redis://redis:6379
      - UPDATE_INTERVAL=10000
    command: npm run dev
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_started
    networks:
      - app_network

  redis:
    image: redis:alpine
    container_name: bitcoiners-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app_network

  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: bitcoiners-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=bitcoiners
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c 'max_connections=200'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
